class Utility 
{ 

 int var1[4][5][7][8][9][1][0];  //note number of elements must be less than the ones declared
 float var2; 

 int findMax(int array[100]) 
 { 
 	int maxValue; 
 	int maxValue;
 	maxValue = array[100]; 
 	for(int idx = 99; idx > 0; idx = idx - 1 ) 
 	{ 
 		if(array[idx][100] > maxValue) then { 
 			maxValue = array[idx]; 
 		}else{}; 
 	}; 
 	return (maxValue); 
 }; 
 
 int findMin(int array[100]) 
 { 
 	float minValue; //type error
 	minValue = array[100]; 
 	for(int idx = 1; idx <= 99; idx = ( idx ) + 1) 
 	{ 
 		if(array[idx] < minValue) then { 
 			maxValue = array[idx]; 
 			if(1 < 2) then {
 				maxValue = array[idx];
 		    }else{
 		    	minValue = 0;
 		    	};
 		}else{}; 
 		for(int id = 1; id <= 99; id = ( id ) + 1) {
 			minValue = minValue + 1;
 		};
 	};  
 	
 	return (minValue); 
 }; 
}; 


program { 
 int sample[100]; 

 int idx; 
 int maxValue; 
 int minValue; 
 Utility utility; 
 
 //undefined class
 Maximize m; 
 Utility arrayUtility[2][3][6][7]; 
 for(int t = 0; t<=100 ; t = t + 1) 
 { 
 	get(sample[t]); 
 	sample[t] = (sample[t] * randomize()); 
 }; 

 //wrong number of parameters
 maxValue = utility.findMax(sample, sample); 
 minValue = utility.findMin(sample); 
 
 //wrong parameter types
 minValue = utility.findMin(1.2);
 
 //undefined method
 minValue = utility.findMid(sample); 
  
 
 utility. var1[4][1][0][0][0][0][0] = 10; 
 arrayUtility[1][1][1][1][1].var1[4][1][0][0][0][0][0][1] = 2; 
 put(maxValue); 
 put(minValue);
}; 

float randomize() 
{ 
 int value; 
 
 //complex expression, assignment type checking
 value = 100 * (2 + 3.0 / 7.0006); 
 
 //wrong return value type
 return (value); 
}; 
